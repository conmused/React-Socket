"use strict";var io=require("socket.io-client");var _=require("lodash");var Mixin=function SocketMixin(b){var a=io;function c(d){return d&&{}.toString.call(d)==="[object Function]";
}return{socketDisconnect:function(){console.log(a);if(a.connected){this.socketOffAll();a.io.close();}},socketConnect:function(d){if(!a.connected){if(!this.state.socketReconnect){a=d?io.connect(d):io.connect();
this.setState({socketReconnect:true});}else{a.io.open();}this.getListeners();}},getSocketListeners:function(){var e=this;var d=this.listeners();this.socketEvents={};
if(!d){throw new Error("SocketMixin requires listeners to be defined on the component");}_.forIn(d,function(h,f){var g=d[f];if(c(g)){e.socketEvents[f]=g;
a.on(f,e.socketEvents[f]);}else{throw new Error('Listener: "'+f+'" is not a function');}});},socketEmit:function(d,e){if(d){a.emit(d,e);}},socketOn:function(d){var e=this.listeners();
if(e&&d){this.socketEvents[d]=e[d];a.on(d,this.socketEvents[d]);}},socketOff:function(d){var e=this.listeners();if(e&&d){if(c(e[d])){a.removeListener(d,this.socketEvents[d]);
this.socketEvents[d]=null;}}},socketOffAll:function(){var d=this.listeners();var e=this;if(d){_.forIn(d,function(g,f){if(c(d[f])){a.removeListener(f,e.socketEvents[f]);
}});this.socketEvents=null;}},};};module.exports=Mixin;
